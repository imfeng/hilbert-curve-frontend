{"version":3,"file":"d3-hilbert.js","sources":["../../src/d3-hilbert.js"],"sourcesContent":["export default function() {\n\n  // Hilbert curve algo, from https://en.wikipedia.org/wiki/Hilbert_curve#Applications_and_mapping_algorithms\n  var hilbert = (function() {\n\n      //rotate/flip a quadrant appropriately\n      function rot(n, xy, rx, ry) {\n          if (ry == 0) {\n              if (rx == 1) {\n                  xy[0] = (n - 1 - xy[0]);\n                  xy[1] = (n - 1 - xy[1]);\n              }\n\n              //Swap x and y\n              xy.push(xy.shift());\n          }\n      }\n\n      // Note: this function will start breaking down for n > 2^26 (MAX_SAFE_INTEGER = 2^53)\n      // x,y: cell coordinates, n: sqrt of num cells (square side size)\n      function point2Distance(x, y, n) {\n          var rx, ry, d = 0,\n              xy = [x, y];\n\n          for (var s = n / 2; s >= 1; s /= 2) {\n              rx = (xy[0] & s) > 0;\n              ry = (xy[1] & s) > 0;\n              d += s * s * ((3 * rx) ^ ry);\n              rot(s, xy, rx, ry);\n          }\n          return d;\n      }\n\n      // d: distance, n: sqrt of num cells (square side size)\n      function distance2Point(d, n) {\n          var rx, ry, t = d,\n              xy = [0, 0];\n        //   const maxY = n - 1;\n          \n\n          for (var s = 1; s < n; s *= 2) {\n              rx = 1 & (t / 2);\n              ry = 1 & (t ^ rx);\n              rot(s, xy, rx, ry);\n\n              xy[0] += (s * rx);\n              xy[1] += (s * ry);\n              t /= 4;\n          }\n        //   xy[1] = maxY - xy[1];\n          return xy;\n      }\n\n      return {\n          point2Distance: point2Distance,\n          distance2Point: distance2Point\n      };\n  })();\n\n  var hilbertLayout = {},\n      canvasWidth = 1,\n      order = 4,\n      simplifyCurves = true;\n\n  hilbertLayout.canvasWidth = function(_) {\n      if (!arguments.length) return canvasWidth;\n      canvasWidth = +_;\n      return hilbertLayout;\n  };\n\n  // Note: Maximum safe order is 26, due to JS numbers upper-boundary of 53 bits\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n  hilbertLayout.order = function(_) {\n      if (!arguments.length) return order;\n      order = +_;\n      return hilbertLayout;\n  };\n\n  hilbertLayout.simplifyCurves = function(_) {\n      if (!arguments.length) return simplifyCurves;\n      simplifyCurves = _;\n      return hilbertLayout;\n  };\n\n  hilbertLayout.layout = function(range) {\n      var d = getHilbertPath(range.start, range.length, order, canvasWidth, simplifyCurves);\n\n      range.cellWidth = d.cellWidth;\n      range.startCell = d.startCell;\n      range.pathVertices = d.pathVertices;\n      range.vec = d.vec;\n\n      return {\n        ...range,\n        ...d,\n      };\n  };\n\n  hilbertLayout.getValAtXY = function(x, y) {\n      var n = Math.pow(2, order),\n          xy = [x, y].map(function(coord) {\n              return Math.floor(coord * n / canvasWidth);\n          });\n      return hilbert.point2Distance(xy[0], xy[1], n);\n  };\n\n  hilbertLayout.getXyAtVal = function (val) {\n      if (val > Math.pow(4, order) || val < 0) {\n          console.error('Value is outside hilbert space boundaries.');\n          return null;\n      } else {\n          return hilbert.distance2Point(val, Math.pow(2, order));\n      }\n  };\n\n  return hilbertLayout;\n\n  //\n\n  function getHilbertPath(start, length, order, sideSize, simplifyCurves) {\n\n      if (simplifyCurves) {\n          // Adjust resolution\n          while (!Number.isInteger(start) || !Number.isInteger(length)) {\n              start *= 4;\n              length *= 4;\n              order += 1;\n          }\n\n          // resolution simplification\n          while (!(start % 4) && !(length % 4) && order > 0) {\n              start /= 4;\n              length /= 4;\n              order -= 1;\n          }\n      }\n\n      // prevent overflow\n      var maxPos = Math.pow(4, order);\n      start = Math.min(start, maxPos);\n      length = Math.min(length, maxPos - start);\n\n      // nSide is on a binary boundary 2^0, 2^1, 2^2, ...\n      var nSide = Math.pow(2, order),\n          cellWidth = sideSize / nSide;\n\n      var startCell = hilbert.distance2Point(start, nSide),\n          vertices = [],\n          prevPnt = startCell,\n          pnt;\n\n          for (var i=1; i < length; i++) {\n            pnt = hilbert.distance2Point(start + i, nSide);\n  \n            vertices.push(\n                pnt[0]>prevPnt[0]\n                    ? 'R'\n                    : (pnt[0]<prevPnt[0]\n                        ? 'L'\n                        : (pnt[1]>prevPnt[1]\n                            ? 'D'\n                            : 'U'\n                        )\n                    )\n            );\n  \n            prevPnt = pnt;\n        }\n\n        const pp = hilbert.distance2Point(start + 1, nSide);\n        const startPP = startCell;\n        const vec = pp[0]>startPP[0]\n            ? 'R'\n            : (pp[0]<startPP[0]\n                ? 'L'\n                : (pp[1]>startPP[1]\n                    ? 'D'\n                    : 'U'\n                )\n            );\n      return {\n          cellWidth: cellWidth,\n          startCell: startCell,\n          pathVertices: vertices,\n          vec,\n      };\n  }\n}\n\nfunction log2(n) {\n    return Math.log(n) / Math.log(2);\n}"],"names":["hilbert","rot","n","xy","rx","ry","push","shift","point2Distance","x","y","d","s","distance2Point","t","hilbertLayout","canvasWidth","order","simplifyCurves","_","arguments","length","layout","range","getHilbertPath","start","cellWidth","startCell","pathVertices","vec","getValAtXY","Math","pow","map","coord","floor","getXyAtVal","val","console","error","sideSize","Number","isInteger","maxPos","min","nSide","vertices","prevPnt","pnt","i","pp","startPP"],"mappings":"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"}